@page "/SalesOrder/AddSalesOrder"
@using SalesOderManagement.Web.Services.Contracts;
@inherits SalesOrderBase
@inject NavigationManager navigationManager


@if (Dimensions == null)
{
    <h3>Loading....</h3>
}
else
{
    int i = 1;
    <h3>
        Add SalesOrder
    </h3>
    <form>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="Name" class="control-label">Name</label>
                   @* <input for="Name" class="form-control" @bind="@SalesOrder.SalesOrderName" onfocus="this.value=''" />*@
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <label for="Name" class="control-label">Attribute Type</label>
                    <select for="State" class="form-control" @onchange="GetAttributeTypeValue">
                        <option value="0">--select attribute type--</option>
                        @foreach (var attr in Attributes)
                        {
                            <option value="@attr.Id">@attr.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="Name" class="control-label">Dimension</label>
                    <select for="dimension" class="form-control" @onchange="GetDimensionIdValue">
                        <option value="0">--select dimension--</option>
                        @foreach (var dimension in Dimensions)
                        {
                            <option value="@dimension.DimensionId">@(dimension.Width + " X " + dimension.Height)</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-1">
                <div class="form-group">
                    <label for="" class="control-label">Action</label>
                    <button type="button" class="btn btn-primary" @onclick="AddToList">Add</button>
                </div>
            </div>
        </div>
        <div class="row">

            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th style="width:1%">SL</th>
                        <th>Attribute Type</th>
                        <th>Dimension</th>
                        <th style="text-align:right; width: 10%">Action</th>
                    </tr>
                </thead>
                <tbody>
                 @*   @if (SalesOrder.DTOSalesOrderAttributes.Count() > 0)
                    {
                        foreach (var item in SalesOrder.DTOSalesOrderAttributes)
                        {
                            <tr>
                                <td>@(i++)</td>
                                <td>@item.SalesOrderAttributeType</td>
                                <td>@item.ActualDimension</td>
                                <td style="text-align:right">
                                    <button class="btn btn-warning" @onclick="@(() => RemoveFromList(item))">Remove</button>
                                </td>
                            </tr>
                        }
                    }*@

                </tbody>
            </table>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="CreateSalesOrder">Save</button>
                    <button type="button" class="btn btn-warning" @onclick="Cancel">Cancel</button>
                </div>
            </div>
        </div>
    </form>

}


@code {

    int SelectedAttrValue = 0;
    int SelectedDimensionId = 0;
    public List<AttributeType> Attributes = new List<AttributeType>();
    protected override async Task OnInitializedAsync()
    {
        Attributes = new List<AttributeType>() { new AttributeType { Id = 1, Name = "Doors" }, new AttributeType { Id = 2, Name = "window" } };
        Dimensions = await DimensionService.GetDimensions();
    }

    void GetAttributeTypeValue(ChangeEventArgs e)
    {
        SelectedAttrValue = Convert.ToUInt16(e.Value);
    }
    void GetDimensionIdValue(ChangeEventArgs e)
    {
        SelectedDimensionId = Convert.ToUInt16(e.Value);
    }

    private void AddToList()
    {
        string type = Attributes.FirstOrDefault(it => it.Id == SelectedAttrValue).Name;
        var dimension = Dimensions.FirstOrDefault(it => it.DimensionId == SelectedDimensionId);
        string actualDimension = dimension.Width + " X " + dimension.Height;
        //SalesOrder.DTOSalesOrderAttributes.Add(new DTOSalesOrderAttribute { SalesOrderAttributeType = type, DimensionId = SelectedDimensionId, ActualDimension = actualDimension });
    }
    //void RemoveFromList(DTOSalesOrderAttribute item)
    //{
    //    SalesOrder.DTOSalesOrderAttributes.Remove(item);
    //}
    private async Task CreateSalesOrder()
    {
        if (true)
        {
            await SalesOrderService.Create(SalesOrder);
            //if (response.StatusCode.ToString() == "OK")
            //{
            //    //DisplayAlert = true;
            //}
            navigationManager.NavigateTo("/SalesOrder/SalesOrderList");
        }
    }
    private void Cancel()
    {
        navigationManager.NavigateTo("/SalesOrder/SalesOrderList");
    }
}

