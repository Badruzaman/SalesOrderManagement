@page "/SalesOrder/SalesOrderList"
@inherits SalesOrderBase
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<PageTitle>SalesOrder List</PageTitle>

<h5 class="@alertClass" style="text-align:center">
    @message
</h5>

<div>
    <a class="btn btn-primary" href='/SalesOrder/AddSalesOrder'>Add New Data</a>
</div>
@if (SalesOrders.Count() == 0)
{
    <div colspan="3">
        No Records to display
    </div>
}
else
{
    int i = 1;
    <table class="table table-bordered table-hover">
        <tbody>
            <tr>
                <th style="width:1%">SL</th>
                <th>Code</th>
                <th>State</th>
                <th>Building</th>
                <th style="text-align:right; width: 10%">
                    Edit
                </th>
                <th style="text-align:right; width: 10%">
                    Delete
                </th>
            </tr>
        </tbody>
        <tbody>
            @foreach (var salesOrder in SalesOrders)
            {
                <tr>
                    <td>
                        @(i++)
                    </td>
                    <td>@salesOrder.Code</td>
                    <td>
                        @salesOrder.StateName
                    </td>
                    <td>
                        @salesOrder.BuildingName
                    </td>
                    <td style="text-align:right">
                        <button class="btn btn-primary" @onclick="@(() => NavigateToEditSalesOrder(salesOrder.SalesOrderId))">Edit</button>
                    </td>
                    <td style="text-align:right">
                        <button class="btn btn-warning" @onclick="@(() => DeleteSalesOrder(salesOrder.SalesOrderId))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    string alertClass = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        SalesOrders = await SalesOrderService.GetSalesOrders();
    }
    void NavigateToEditSalesOrder(long id)
    {
        navigationManager.NavigateTo($"/SalesOrder/EditSalesOrder/{id}");
    }
    async Task DeleteSalesOrder(long id)
    {
        if (id > 0)
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete sales order?"))
                return;
            var result = await SalesOrderService.Delete(id);
            if (result)
            {
                SalesOrders = SalesOrders.Where(it => it.SalesOrderId != id);
                alertClass = "alert-success";
                message = "deleted successfully";
            }
            else
            {
                alertClass = "alert-danger";
                message = "error while deleting data";
            }
        }
        else
        {
            alertClass = "alert-danger";
            message = "error while deleting data";
        }

    }
}

