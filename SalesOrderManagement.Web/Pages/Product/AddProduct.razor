@page "/Product/AddProduct"
@using SalesOderManagement.Web.Services.Contracts;
@inherits SalesOrderBase
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Add Product</PageTitle>

<h5 class="alert-danger" style="text-align:center">
    @message
</h5>

@if (Dimensions == null)
{
    <h3>Loading....</h3>
}
else
{
    int i = 1;
    <h3>
        Add Product
    </h3>
    <form>
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    <label for="Name" class="control-label">Name</label>
                    <input for="Name" class="form-control" @bind="@product.ProductName" onfocus="this.value=''" />
                </div>
            </div>
        </div>
        <div class="row" style="width:100%;height:20px"></div>
        <div class="row">
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>
                            <div class="form-group">
                                <label for="Name" class="control-label">Attribute Type</label>
                                <select for="State" class="form-control" @onchange="GetAttributeTypeValue">
                                    <option value="0">--select attribute type--</option>
                                    @foreach (var attr in Attributes)
                                    {
                                        <option value="@attr.TypeId">@attr.Name</option>
                                    }
                                </select>
                            </div>
                        </th>
                        <th style="width:20%">
                            <div class="form-group">
                                <label for="Name" class="control-label">Dimension</label>
                                <select for="dimension" class="form-control" @bind="dimensionValue">
                                    <option value="0">--select dimension--</option>
                                    @foreach (var dimension in Dimensions)
                                    {
                                        <option value="@dimension.DimensionId">@(dimension.Width + " X " + dimension.Height)</option>
                                    }
                                </select>
                            </div>
                        </th>
                        <th style="width:10%">
                            <div class="form-group" style="width:10%">
                                <label for="" class="control-label">Action</label>
                                <button type="button" class="btn btn-primary" @onclick="AddToList">Add</button>
                            </div>
                        </th>
                    </tr>
                </thead>

            </table>
        </div>


        <div class="row">

            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th style="width:1%">SL</th>
                        <th>Attribute Type</th>
                        <th>Dimension</th>
                        <th style="text-align:right; width: 10%">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (product.DTOProductAttributes.Count() > 0)
                    {
                        foreach (var item in product.DTOProductAttributes)
                        {
                            <tr>
                                <td>@(i++)</td>
                                <td>@item.ProductAttributeType</td>
                                <td>@item.ActualDimension</td>
                                <td style="text-align:right">
                                    <button type="button" class="btn btn-warning" @onclick="@(() => RemoveFromList(item))">Remove</button>
                                </td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="CreateProduct">Save</button>
                    <button type="button" class="btn btn-warning" @onclick="Cancel">Cancel</button>
                </div>
            </div>
        </div>
    </form>

}


@code {

    int SelectedAttrValue = 0;
    int dimensionValue = 0;
    public List<AttributeType> Attributes = new List<AttributeType>();
    protected override async Task OnInitializedAsync()
    {
        Attributes = GetAttributeTypes();
        Dimensions = await DimensionService.GetDimensions();
    }

    void GetAttributeTypeValue(ChangeEventArgs e)
    {
        SelectedAttrValue = Convert.ToUInt16(e.Value);
    }


    void AddToList()
    {
        message = string.Empty;
        string type = Attributes.FirstOrDefault(it => it.TypeId == SelectedAttrValue).Name;
        var dimension = Dimensions.FirstOrDefault(it => it.DimensionId == dimensionValue);
        string actualDimension = dimension.Width + " X " + dimension.Height;
        if(!string.IsNullOrEmpty(type) && dimensionValue > 0)
        {
            bool isExist = checkDuplicateProduct(product, dimensionValue, SelectedAttrValue);
            if(!isExist)
            {
                product.DTOProductAttributes.Add(new DTOProductAttribute { ProductAttributeType = type, TypeId=SelectedAttrValue, DimensionId = dimensionValue, ActualDimension = actualDimension });
            }
            else
            {
                message = "please check inputs";
            }
        }
       
    }
    void RemoveFromList(DTOProductAttribute item)
    {
        product.DTOProductAttributes.Remove(item);
    }
    async Task CreateProduct()
    {
        message = string.Empty;
        bool isvalid = getModelValidation(product); // model validation
        if (isvalid)
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to save product?"))
                return;
            var result = await ProductService.Create(product);
            if (result)
            {
                navigationManager.NavigateTo("/Product/ProductList");
            }
            else
            {
                message = "error while storing data";
            }
        }
        else
        {
            message = "please check inputs";
        }
    }
    void Cancel()
    {
        navigationManager.NavigateTo("/Product/ProductList");
    }
}

