@page "/SalesOrder/AddSalesOrder"
@using SalesOderManagement.Web.Services.Contracts;
@inherits SalesOrderBase
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Add SalesOrder</PageTitle>
<h5 class="alert-danger" style="text-align:center">
    @message
</h5>
@if (salesOrder == null)
{
    <h3>Loading....</h3>
}
else
{
    int i = 1;
    <h3>
        Add Sales Order
    </h3>
    <form>
        <div class="row">
            <div class="col-md-2"></div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="State" class="control-label">State</label>
                    <select for="State" class="form-control" @onchange="getBuildings">
                        <option value="0">--select State--</option>
                        @foreach (var state in States)
                        {
                            <option value="@state.StateId">@state.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    <label for="Building" class="control-label">Building</label>
                    <select for="Building" class="form-control" @bind="salesOrder.BuildingsId">
                        <option value="0">--select building--</option>
                        @foreach (var buidling in Buildings)
                        {
                            <option value="@buidling.BuildingId">@buidling.Name</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-2"></div>
        </div>
        <div class="row" style="width:100%;height:20px"></div>
        <div class="row">
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th>
                            <div class="form-group">
                                <label for="Attribute" class="control-label">Product</label>
                                <select for="dimension" class="form-control" @bind="productAttributeId">
                                    <option value="0">--select attribute--</option>
                                    @foreach (var productAttribute in ProductAttributes)
                                    {
                                        <option value="@productAttribute.ProductAttributeId">@productAttribute.ProductAttributeName</option>
                                    }
                                </select>
                            </div>
                        </th>
                        <th style="width:20%">
                            <div class="form-group" style="text-align:right">
                                <label for="Quantity" class="control-label">Quantity</label>
                                <input class="form-control" style="text-align:right" type="number" @bind="Quantity" />
                            </div>
                        </th>
                        <th style="width:10%">
                            <div class="form-group" style="width:10%">
                                <label for="" class="control-label">Action</label>
                                <button type="button" class="btn btn-primary" @onclick="AddToList">Add</button>
                            </div>
                        </th>
                    </tr>
                </thead>

            </table>
        </div>
        <div class="row">
            <table class="table table-bordered table-hover">
                <thead>
                    <tr>
                        <th style="width:5%">
                            SL
                        </th>
                        <th>
                            Product
                        </th>
                        <th style="width: 30%; text-align:right">
                            Quantity
                        </th>
                        <th style="width: 10%; text-align:right">
                            Action
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        foreach (var product in salesOrder.DTOSalesOrderDetails)
                        {
                            <tr>
                                <td>
                                    @(i++)
                                </td>
                                <td>
                                    @product.ProductAttributeName
                                </td>
                                <td style="text-align:right">
                                    @product.QuantityOfWindows
                                </td>
                                <td style="text-align:right; width:10%">
                                    <button type="button" class="btn btn-warning" @onclick="@(() => RemoveItemFromList(product))">Remove</button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>

            </table>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="CreateSalesOrder">Save</button>
                    <button type="button" class="btn btn-warning" @onclick="Cancel">Cancel</button>
                </div>
            </div>
        </div>
    </form>

}

@code {

    int productAttributeId = 0;
    int Quantity = 0;
    int productId = 0;
    int stateId = 0;

    protected override async Task OnInitializedAsync()
    {
        Buildings = Enumerable.Empty<DTOBuilding>().ToList();
        ProductAttributes = await ProductService.GetProductAttributes();
        salesOrder.DTOSalesOrderDetails = new List<DTOSalesOrderDetail>();
        States = await StateService.GetStates();
        Products = await ProductService.GetProducts();
    }
    async Task getBuildings(ChangeEventArgs e)
    {
        stateId = Convert.ToUInt16(e.Value);
        var BuildingList = await BuildingService.GetBuildings();
        Buildings = from building in BuildingList
                    where building.StateId == stateId
                    select building;
    }

    void AddToList()
    {
        message = string.Empty;
        string? productAttributeName = string.Empty;
        var attributeInfo = ProductAttributes.FirstOrDefault(it => it.ProductAttributeId == productAttributeId);
        if (attributeInfo != null)
        {
            productAttributeName = attributeInfo.ProductAttributeName;
        }
        if (productAttributeId > 0 && Quantity > 0)
        {
            bool isExist = checkDuplicateProduct(salesOrder, productAttributeId); // check duplicate product 
            if (!isExist)
            {

                salesOrder.DTOSalesOrderDetails.Add(new
                DTOSalesOrderDetail
                    {
                        ProductAttributeId = productAttributeId,
                        QuantityOfWindows = Quantity,
                        ProductAttributeName = productAttributeName
                    });
            }
            else
            {
                message = "The product has already added";
            }
        }
    }

    void RemoveItemFromList(DTOSalesOrderDetail item)
    {
        salesOrder.DTOSalesOrderDetails.Remove(item);
    }

    async Task CreateSalesOrder()
    {
        message = string.Empty;
        salesOrder.StatesId = stateId;
        bool isvalid = getModelValidation(salesOrder); // model validation
        if (isvalid)
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to save sales order?"))
                return;
            var result = await SalesOrderService.Create(salesOrder);
            if (result)
            {
                navigationManager.NavigateTo("/SalesOrder/SalesOrderList");
            }
            else
            {
                message = "error while storing data";
            }
        }
        else
        {
            message = "please check inputs";
        }

    }
    void Cancel()
    {
        navigationManager.NavigateTo("/SalesOrder/SalesOrderList");
    }
}

